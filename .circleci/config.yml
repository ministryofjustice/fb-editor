version: 2.1
orbs:
  slack: circleci/slack@3.4.2
  ruby: circleci/ruby@1.4.0
  node: circleci/node@5.1.0
  browser-tools: circleci/browser-tools@1.4.3
  kubernetes: circleci/kubernetes@0.12.0
  aws-cli: circleci/aws-cli@4.0.0 # use v4 of this orb
  aws-ecr: circleci/aws-ecr@8.2.1 # this orb doesn't support OIDC v2, so we use aws-cli to authenticate
  helm: circleci/helm@2.0.1

parameters:
  kubectl-version:
    type: string
    default: v1.24.16

jobs:
  login-to-aws:
    docker: &docker_image
      - image: 'cimg/ruby:3.1.3-node'
    steps:
      - checkout
      - aws-cli/setup:
          role_arn: $ECR_ROLE_TO_ASSUME # this will use the env var
          region: $ECR_REGION # this will use the env var
      - run: &ecr_login
          name: Login to ecr
          command: |
            aws ecr get-login-password --region $ECR_REGION | docker login --username AWS --password-stdin ${AWS_ECR_REGISTRY_ID}.dkr.ecr.${ECR_REGION}.amazonaws.com
            aws configure export-credentials --format env
      - run: |
          cp $BASH_ENV bash.env
      - persist_to_workspace:
          root: .
          paths:
            - bash.env
  build:
    docker: &docker_image
      - image: 'cimg/ruby:3.1.3-node'
    steps:
      - checkout
      - ruby/install-deps
      - run: &node_version
          name: Swap node versions
          command: |
            set +e
            wget -qO- https://raw.githubusercontent.com/nvm-sh/nvm/v0.35.1/install.sh | bash
            export NVM_DIR="$HOME/.nvm"
            [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
            [ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"
            nvm install v16.20.1
            nvm alias default 16.20.1

            echo 'export NVM_DIR="$HOME/.nvm"' >> $BASH_ENV
            echo '[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"' >> $BASH_ENV
      - node/install-packages:
          pkg-manager: yarn
      - slack/status: &slack_status
          fail_only: true
          only_for_branches: main
          failure_message: ":facepalm:  Failed job $CIRCLE_JOB  :homer-disappear:"
          include_job_number_field: false
   
  lint:
    docker:
      - image: 'cimg/ruby:3.1.3-node'
    steps:
      - checkout
      - ruby/install-deps
      - ruby/rubocop-check:
          format: progress
          label: running rubocop
      - slack/status: *slack_status
  security:
    docker:
      - image: 'cimg/ruby:3.1.3-node'
    steps:
      - checkout
      - ruby/install-deps
      - run: bundle exec brakeman -q --no-pager -i brakeman.ignore
      - slack/status: *slack_status
  rspec_test:
    docker: &test_image
      - image: 'cimg/ruby:3.1.3-node'
      - environment:
          POSTGRES_DB: editor_local
          POSTGRES_PASSWORD: password
          POSTGRES_USER: postgres
        image: 'cimg/postgres:12.9'
    environment: &test_environment
      BUNDLE_JOBS: '3'
      BUNDLE_RETRY: '3'
      PGHOST: 127.0.0.1
      PGPASSWORD: password
      PGUSER: postgres
      RAILS_ENV: test
    parallelism: 3
    steps:
      - checkout
      - ruby/install-deps
      - run: *node_version
      - node/install-packages:
          pkg-manager: yarn
      - run: &wait_for_db
          name: Wait for DB
          command: 'dockerize -wait tcp://localhost:5432 -timeout 1m'
      - run: &db_setup
          name: Database setup
          command: |
            bundle exec rails db:setup
            bundle exec rails db:migrate:ignore_concurrent
      - run:
          name: Running the tests
          command: |
            TESTFILES=$(circleci tests glob "spec/**/*_spec.rb" | circleci tests split --split-by=name)
            echo '***********'
            echo $TESTFILES
            echo '***********'

            bundle exec rspec $TESTFILES --profile 10
      - slack/status: *slack_status
  js_test:
    docker:
      - image: 'cimg/ruby:3.1.3-node'
    steps:
      - checkout
      - run: *node_version
      - node/install-packages:
          pkg-manager: yarn
      - run:
          name: Running the JS tests
          command: yarn run jstest
      - slack/status: *slack_status
  build_web_testable_branch:
    docker: &ecr_image
      - image: docker.io/ministryofjustice/fb-builder:latest
        auth:
          username: $DOCKER_LOGIN
          password: $DOCKER_PASSWORD
    steps:
      - checkout
      - setup_remote_docker: &remote_docker
          docker_layer_caching: true
      - attach_workspace:
          at: .
      - run: &workspace_envs
          command: |
            cat bash.env >> $BASH_ENV
      - run: &build_sha
          name: Setup base environment variable
          command: |
            echo "export BUILD_SHA=$CIRCLE_SHA1" >> $BASH_ENV
      - run: &deploy_scripts
          name: cloning deploy scripts
          command: 'git clone --branch temporary-ecr-creds git@github.com:ministryofjustice/fb-deploy.git deploy-scripts'
      - run:
          name: build testable editor web docker images
          environment:
            ENVIRONMENT_NAME: test
            IMAGE_TYPE: web
          command: ./deploy-scripts/bin/build
      - slack/status: &testable_slack_status
          fail_only: true
          failure_message: ":facepalm:  Failed job ${CIRCLE_JOB} for ${CIRCLE_BRANCH}  :homer-disappear:"
          include_job_number_field: false
  build_workers_testable_branch:
    working_directory: ~/circle/git/fb-editor
    docker: *ecr_image
    steps:
      - checkout
      - setup_remote_docker: *remote_docker
      - run: *build_sha
      - run: *deploy_scripts
      - aws-cli/setup:
          role_arn: $WORKERS_ECR_ROLE_TO_ASSUME # this will use the env var
          region: $ECR_REGION # this will use the env var
      - run:
          name: Swap to workers env
          command: |
            echo "export WEB_AWS_REGISTRY_ID=$AWS_ECR_REGISTRY_ID" >> $BASH_ENV
            echo "export WEB_ECR_REPOSITORY=$ECR_REPOSITORY" >> $BASH_ENV
            echo "export AWS_ECR_REGISTRY_ID=$WORKERS_AWS_ECR_REGISTRY_ID" >> $BASH_ENV
            echo "export ECR_REPOSITORY=$WORKERS_ECR_REPOSITORY" >> $BASH_ENV
      - run:
          name: build testable editor workers docker images
          environment:
            ENVIRONMENT_NAME: test
            IMAGE_TYPE: workers
          command: './deploy-scripts/bin/build'
      - run:
          name: Restore env
          command: |
            echo "export AWS_ECR_REGISTRY_ID=$WEB_AWS_REGISTRY_ID" >> $BASH_ENV
            echo "export ECR_REPOSITORY=$WEB_ECR_REPOSITORY" >> $BASH_ENV
      - slack/status: *testable_slack_status
  deploy_testable_branch:
    working_directory: ~/circle/git/fb-editor
    docker: *ecr_image
    steps:
      - checkout
      - setup_remote_docker: *remote_docker
      - attach_workspace:
          at: .
      - run: *workspace_envs
      - add_ssh_keys: &ssh_keys
          fingerprints:
            - 33:9c:9d:d0:86:ca:45:a8:26:2a:f0:90:e5:e8:e8:2a
      - run: &base_environment_variables
          name: Setup base environment variable
          command: |
            echo 'export BUILD_SHA=$CIRCLE_SHA1' >> $BASH_ENV
            echo 'export SSH_FILE_FOR_SECRETS=~/.ssh/id_rsa_339c9dd086ca45a8262af090e5e8e82a' >> $BASH_ENV
            source $BASH_ENV
      - run: *deploy_scripts
      - run:
          name: deploy to test
          environment:
            APPLICATION_NAME: fb-editor
            PLATFORM_ENV: test
            K8S_NAMESPACE: formbuilder-saas-test
          command: './deploy-scripts/bin/deploy-eks'
      - slack/status: *testable_slack_status
  remove_testable_editors:
    docker:
      - image: 'cimg/ruby:3.1.3-node'
    steps:
      - checkout
      - ruby/install-deps
      - kubernetes/install-kubectl
      - run: *deploy_scripts
      - run:
          name: set kubernetes context for saas namespace
          command: './deploy-scripts/bin/set_testable_editors_context'
      - run:
          name: remove testable editors
          command: bundle exec rails remove:testable_editors
      - slack/status: *testable_slack_status
  build_web_image:
    working_directory: ~/circle/git/fb-editor
    docker: *ecr_image
    steps:
      - checkout
      - setup_remote_docker: *remote_docker
      - run: *build_sha
      - attach_workspace:
          at: .
      - run: *workspace_envs
      - run: *deploy_scripts
      - run:
          name: build web docker images
          environment:
            ENVIRONMENT_NAME: test
            IMAGE_TYPE: web
          command: './deploy-scripts/bin/build'
      - slack/status: *slack_status
  build_workers_image:
    working_directory: ~/circle/git/fb-editor
    docker: *ecr_image
    steps:
      - checkout
      - setup_remote_docker: *remote_docker
      - run: *build_sha
      - run: *deploy_scripts
      - aws-cli/setup:
          role_arn: $WORKERS_ECR_ROLE_TO_ASSUME # this will use the env var
          region: $ECR_REGION # this will use the env var
      - run:
          name: Swap to workers env
          command: |
            echo "export WEB_AWS_REGISTRY_ID=$AWS_ECR_REGISTRY_ID" >> $BASH_ENV
            echo "export WEB_ECR_REPOSITORY=$ECR_REPOSITORY" >> $BASH_ENV
            echo "export AWS_ECR_REGISTRY_ID=$WORKERS_AWS_ECR_REGISTRY_ID" >> $BASH_ENV
            echo "export ECR_REPOSITORY=$WORKERS_ECR_REPOSITORY" >> $BASH_ENV
      - run:
          name: build workers docker images
          environment:
            ENVIRONMENT_NAME: test
            IMAGE_TYPE: workers
          command: './deploy-scripts/bin/build'
      - run:
          name: Restore env
          command: |
            echo "export AWS_ECR_REGISTRY_ID=$WEB_AWS_REGISTRY_ID" >> $BASH_ENV
            echo "export ECR_REPOSITORY=$WEB_ECR_REPOSITORY" >> $BASH_ENV
      - slack/status: *slack_status
  deploy_to_test_eks:
    working_directory: ~/circle/git/fb-editor
    docker: *ecr_image
    steps:
      - checkout
      - setup_remote_docker: *remote_docker
      - add_ssh_keys: *ssh_keys
      - run: *base_environment_variables
      - run: *deploy_scripts
      - run:
          name: deploy to test (EKS cluster)
          environment:
            APPLICATION_NAME: fb-editor
            PLATFORM_ENV: test
            K8S_NAMESPACE: formbuilder-saas-test
          command: './deploy-scripts/bin/deploy-eks'
      - slack/status: *slack_status
  acceptance_tests_eks:
    docker: *test_image
    resource_class: large
    environment: *test_environment
    parallelism: 7
    steps:
      - checkout
      - ruby/install-deps
      - run: sudo apt-get update
      - browser-tools/install-chrome:
          # TODO remove following line when fixed https://github.com/CircleCI-Public/browser-tools-orb/issues/90
          chrome-version: 116.0.5845.96
      - browser-tools/install-chromedriver
      - run:
          name: Check browser tools install
          command: |
            google-chrome --version
            chromedriver --version
      - run: *wait_for_db
      - run: *db_setup
      - run:
          name: Run acceptance tests
          command: |
            EDITOR_APP=https://fb-editor-test.apps.live.cloud-platform.service.justice.gov.uk
            echo 'export ACCEPTANCE_TESTS_EDITOR_APP=$EDITOR_APP' >> $BASH_ENV
            echo 'export ACCEPTANCE_TESTS_USER=$ACCEPTANCE_TESTS_USER' >> $BASH_ENV
            echo 'export ACCEPTANCE_TESTS_PASSWORD=$ACCEPTANCE_TESTS_PASSWORD' >> $BASH_ENV
            echo 'export CI_MODE=true' >> $BASH_ENV
            source $BASH_ENV

            TESTFILES=$(circleci tests glob "acceptance/**/*_spec.rb" | circleci tests split --split-by=timings --timings-type=filename)
            echo '***********'
            echo $TESTFILES
            echo '***********'

            bundle exec rspec --format progress \
              --format RspecJunitFormatter \
              --out ~/acceptance/acceptance.xml \
              $TESTFILES
      - store_test_results:
          path: ~/acceptance
      - slack/status: *slack_status
  testable_branch_acceptance_tests:
    docker: *test_image
    resource_class: large
    environment: *test_environment
    parallelism: 7
    steps:
      - checkout
      - ruby/install-deps
      - run: sudo apt-get update
      - browser-tools/install-chrome:
          # TODO remove following line when fixed https://github.com/CircleCI-Public/browser-tools-orb/issues/90
          chrome-version: 116.0.5845.96      
      - browser-tools/install-chromedriver
      - run:
          name: Check browser tools install
          command: |
            google-chrome --version
            chromedriver --version
      - run: *wait_for_db
      - run: *db_setup
      - run:
          name: Run acceptance tests
          command: |
            EDITOR_APP=https://${CIRCLE_BRANCH}.apps.live.cloud-platform.service.justice.gov.uk
            echo 'export ACCEPTANCE_TESTS_EDITOR_APP=$EDITOR_APP' >> $BASH_ENV
            echo 'export ACCEPTANCE_TESTS_USER=$ACCEPTANCE_TESTS_USER' >> $BASH_ENV
            echo 'export ACCEPTANCE_TESTS_PASSWORD=$ACCEPTANCE_TESTS_PASSWORD' >> $BASH_ENV
            echo 'export CI_MODE=true' >> $BASH_ENV
            source $BASH_ENV

            TESTFILES=$(circleci tests glob "acceptance/**/*_spec.rb" | circleci tests split --split-by=timings --timings-type=filename)
            echo '***********'
            echo $TESTFILES
            echo '***********'

            bundle exec rspec --format progress \
              --format RspecJunitFormatter \
              --out ~/acceptance/acceptance.xml \
              $TESTFILES
      - store_test_results:
          path: ~/acceptance
      - slack/status: *testable_slack_status
  deploy_to_live_eks:
    working_directory: ~/circle/git/fb-editor
    docker: *ecr_image
    steps:
      - checkout
      - setup_remote_docker: *remote_docker
      - add_ssh_keys: *ssh_keys
      - run: *base_environment_variables
      - run: *deploy_scripts
      - run:
          name: deploy to live (eks)
          environment:
            APPLICATION_NAME: fb-editor
            PLATFORM_ENV: live
            K8S_NAMESPACE: formbuilder-saas-live
          command: './deploy-scripts/bin/deploy-eks'
      - slack/status:
          only_for_branches: main
          success_message: ":rocket:  Successfully deployed to Live (eks) :guitar:"
          failure_message: ":alert:  Failed to deploy to Live (eks)  :try_not_to_cry:"
          include_job_number_field: false

workflows:
  version: 2
  tear_down_testable_editors:
    jobs:
      - remove_testable_editors:
          context: &context
            - moj-forms
          filters:
            branches:
              only:
                - main
  test_and_build:
    jobs:
      - build:
          filters:
            branches:
              ignore:
                - /testable-.*/
      - login-to-aws:
          context: *context
          requires:
            - build
      - lint:
          requires:
            - build
      - security:
          requires:
            - build
      - rspec_test:
          requires:
            - build
      - js_test:
          requires:
            - build
      - build_web_image:
          context: *context
          requires:
            - lint
            - login-to-aws
            - security
            - rspec_test
            - js_test
          filters:
            branches:
              only:
                - main
      - build_workers_image:
          context: *context
          requires:
            - lint
            - login-to-aws
            - security
            - rspec_test
            - js_test
          filters:
            branches:
              only:
                - main
      - deploy_to_test_eks:
          context: *context
          requires:
            - build_web_image
            - build_workers_image
      - acceptance_tests_eks:
          context: *context
          requires:
            - deploy_to_test_eks
      - deploy_to_live_eks:
          context: *context
          requires:
            - acceptance_tests_eks
  deploy_testable_branch:
    jobs:
      - build:
          filters:
            branches:
              only:
                - /testable-.*/
      - login-to-aws:
          context: *context
          requires:
            - build
      - lint:
          requires:
            - build
      - security:
          requires:
            - build
      - rspec_test:
          requires:
            - build
      - js_test:
          requires:
            - build
      - build_web_testable_branch:
          context: *context
          requires:
            - build
            - login-to-aws
            - lint
            - security
            - rspec_test
            - js_test
          filters:
            branches:
              only:
                - /testable-.*/
      - build_workers_testable_branch:
          context: *context
          requires:
            - build
            - login-to-aws
            - lint
            - security
            - rspec_test
            - js_test
          filters:
            branches:
              only:
                - /testable-.*/
      - deploy_testable_branch:
          context: *context
          requires:
            - build
            - build_web_testable_branch
            - build_workers_testable_branch
      - testable_branch_acceptance_tests:
          context: *context
          requires:
            - deploy_testable_branch
      - slack/approval-notification:
          message: ":test_tube: :test_tube: :test_tube:\nSuccessfully deployed branch\nVisit: https://${CIRCLE_BRANCH}.apps.live.cloud-platform.service.justice.gov.uk\n:test_tube: :test_tube: :test_tube:"
          include_job_number_field: false
          requires:
            - testable_branch_acceptance_tests
